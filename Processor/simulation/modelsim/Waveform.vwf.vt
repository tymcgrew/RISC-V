// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2019 00:15:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] KEY;
reg [17:0] SW;
reg clk;
// wires                                               
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [0:6] HEX3;
wire [0:6] HEX4;
wire [0:6] HEX5;
wire [0:6] HEX6;
wire [0:6] HEX7;
wire [8:0] LEDG;
wire [5:0] STATE;
wire [31:0] instruction;
wire [31:0] register_out_a;

// assign statements (if any)                          
Processor i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LEDG(LEDG),
	.STATE(STATE),
	.SW(SW),
	.clk(clk),
	.instruction(instruction),
	.register_out_a(register_out_a)
);
initial 
begin 
#1000000 $stop;
end 

// SW[17]
initial
begin
	SW[17] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

