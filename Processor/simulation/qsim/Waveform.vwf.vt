// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2019 23:11:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] KEY;
reg [17:0] SW;
reg clk;
// wires                                               
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [0:6] HEX3;
wire [0:6] HEX4;
wire [0:6] HEX5;
wire [0:6] HEX6;
wire [0:6] HEX7;
wire [8:0] LEDG;
wire [5:0] STATE;
wire [31:0] alu_in_a;
wire [31:0] alu_in_b;
wire [31:0] alu_out;
wire [2:0] alu_status;
wire [31:0] instruction;
wire instructionregister_wren;
wire [9:0] memory_address;
wire memory_wren;
wire out_update;
wire [31:0] programcounter_in;
wire programcounter_wren;
wire [4:0] register_address_a;
wire [4:0] register_address_b;
wire [31:0] register_in_a;
wire [31:0] register_out_a;
wire register_wren;
wire [31:0] result_reg_out;
wire result_wren;

// assign statements (if any)                          
Processor i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LEDG(LEDG),
	.STATE(STATE),
	.SW(SW),
	.alu_in_a(alu_in_a),
	.alu_in_b(alu_in_b),
	.alu_out(alu_out),
	.alu_status(alu_status),
	.clk(clk),
	.instruction(instruction),
	.instructionregister_wren(instructionregister_wren),
	.memory_address(memory_address),
	.memory_wren(memory_wren),
	.out_update(out_update),
	.programcounter_in(programcounter_in),
	.programcounter_wren(programcounter_wren),
	.register_address_a(register_address_a),
	.register_address_b(register_address_b),
	.register_in_a(register_in_a),
	.register_out_a(register_out_a),
	.register_wren(register_wren),
	.result_reg_out(result_reg_out),
	.result_wren(result_wren)
);
initial 
begin 
#2000000 $finish;
end 

// SW[17]
initial
begin
	SW[17] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

