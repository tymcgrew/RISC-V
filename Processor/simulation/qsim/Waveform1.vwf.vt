// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2019 21:29:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg KEY0;
reg [31:0] SW;
reg [2:0] alu_status;
reg clk;
reg [31:0] instruction;
reg [31:0] register_out_b;
reg rst;
// wires                                               
wire LEDG0;
wire [5:0] STATE;
wire alu_a_mux;
wire alu_b_mux;
wire [31:0] alu_immediate;
wire [2:0] alu_op;
wire instructionregister_wren;
wire memory_mux;
wire memory_sign;
wire [1:0] memory_width;
wire memory_wren;
wire out_update;
wire [31:0] programcounter_immediate;
wire [1:0] programcounter_mux;
wire programcounter_wren;
wire [4:0] register_address_a;
wire [4:0] register_address_b;
wire [31:0] register_immediate;
wire [1:0] register_mux;
wire register_wren;
wire result_wren;

// assign statements (if any)                          
Control i1 (
// port map - connection between master ports and signals/registers   
	.KEY0(KEY0),
	.LEDG0(LEDG0),
	.STATE(STATE),
	.SW(SW),
	.alu_a_mux(alu_a_mux),
	.alu_b_mux(alu_b_mux),
	.alu_immediate(alu_immediate),
	.alu_op(alu_op),
	.alu_status(alu_status),
	.clk(clk),
	.instruction(instruction),
	.instructionregister_wren(instructionregister_wren),
	.memory_mux(memory_mux),
	.memory_sign(memory_sign),
	.memory_width(memory_width),
	.memory_wren(memory_wren),
	.out_update(out_update),
	.programcounter_immediate(programcounter_immediate),
	.programcounter_mux(programcounter_mux),
	.programcounter_wren(programcounter_wren),
	.register_address_a(register_address_a),
	.register_address_b(register_address_b),
	.register_immediate(register_immediate),
	.register_mux(register_mux),
	.register_out_b(register_out_b),
	.register_wren(register_wren),
	.result_wren(result_wren),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

