// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2019 20:51:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] address_a;
reg [4:0] address_b;
reg clock;
reg [31:0] data_a;
reg [31:0] data_b;
reg wren_a;
reg wren_b;
// wires                                               
wire [31:0] q_a;
wire [31:0] q_b;

// assign statements (if any)                          
Register i1 (
// port map - connection between master ports and signals/registers   
	.address_a(address_a),
	.address_b(address_b),
	.clock(clock),
	.data_a(data_a),
	.data_b(data_b),
	.q_a(q_a),
	.q_b(q_b),
	.wren_a(wren_a),
	.wren_b(wren_b)
);
initial 
begin 
#1000000 $finish;
end 
// address_a[ 4 ]
initial
begin
	address_a[4] = 1'b0;
end 
// address_a[ 3 ]
initial
begin
	address_a[3] = 1'b0;
end 
// address_a[ 2 ]
initial
begin
	address_a[2] = 1'b1;
end 
// address_a[ 1 ]
initial
begin
	address_a[1] = 1'b1;
end 
// address_a[ 0 ]
initial
begin
	address_a[0] = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// data_a[ 31 ]
initial
begin
	data_a[31] = 1'b0;
	data_a[31] = #20000 1'b1;
	data_a[31] = #40000 1'b0;
end 
// data_a[ 30 ]
initial
begin
	data_a[30] = 1'b0;
	data_a[30] = #20000 1'b1;
	data_a[30] = #40000 1'b0;
end 
// data_a[ 29 ]
initial
begin
	data_a[29] = 1'b0;
	data_a[29] = #20000 1'b1;
	data_a[29] = #40000 1'b0;
end 
// data_a[ 28 ]
initial
begin
	data_a[28] = 1'b0;
	data_a[28] = #20000 1'b1;
	data_a[28] = #40000 1'b0;
end 
// data_a[ 27 ]
initial
begin
	data_a[27] = 1'b0;
	data_a[27] = #20000 1'b1;
	data_a[27] = #40000 1'b0;
end 
// data_a[ 26 ]
initial
begin
	data_a[26] = 1'b0;
	data_a[26] = #20000 1'b1;
	data_a[26] = #40000 1'b0;
end 
// data_a[ 25 ]
initial
begin
	data_a[25] = 1'b0;
	data_a[25] = #20000 1'b1;
	data_a[25] = #40000 1'b0;
end 
// data_a[ 24 ]
initial
begin
	data_a[24] = 1'b0;
	data_a[24] = #20000 1'b1;
	data_a[24] = #40000 1'b0;
end 
// data_a[ 23 ]
initial
begin
	data_a[23] = 1'b0;
	data_a[23] = #20000 1'b1;
	data_a[23] = #40000 1'b0;
end 
// data_a[ 22 ]
initial
begin
	data_a[22] = 1'b0;
	data_a[22] = #20000 1'b1;
	data_a[22] = #40000 1'b0;
end 
// data_a[ 21 ]
initial
begin
	data_a[21] = 1'b0;
	data_a[21] = #20000 1'b1;
	data_a[21] = #40000 1'b0;
end 
// data_a[ 20 ]
initial
begin
	data_a[20] = 1'b0;
	data_a[20] = #20000 1'b1;
	data_a[20] = #40000 1'b0;
end 
// data_a[ 19 ]
initial
begin
	data_a[19] = 1'b0;
	data_a[19] = #20000 1'b1;
	data_a[19] = #40000 1'b0;
end 
// data_a[ 18 ]
initial
begin
	data_a[18] = 1'b0;
	data_a[18] = #20000 1'b1;
	data_a[18] = #40000 1'b0;
end 
// data_a[ 17 ]
initial
begin
	data_a[17] = 1'b0;
	data_a[17] = #20000 1'b1;
	data_a[17] = #40000 1'b0;
end 
// data_a[ 16 ]
initial
begin
	data_a[16] = 1'b0;
	data_a[16] = #20000 1'b1;
	data_a[16] = #40000 1'b0;
end 
// data_a[ 15 ]
initial
begin
	data_a[15] = 1'b0;
	data_a[15] = #20000 1'b1;
	data_a[15] = #40000 1'b0;
end 
// data_a[ 14 ]
initial
begin
	data_a[14] = 1'b0;
	data_a[14] = #20000 1'b1;
	data_a[14] = #40000 1'b0;
end 
// data_a[ 13 ]
initial
begin
	data_a[13] = 1'b0;
	data_a[13] = #20000 1'b1;
	data_a[13] = #40000 1'b0;
end 
// data_a[ 12 ]
initial
begin
	data_a[12] = 1'b0;
	data_a[12] = #20000 1'b1;
	data_a[12] = #40000 1'b0;
end 
// data_a[ 11 ]
initial
begin
	data_a[11] = 1'b0;
	data_a[11] = #20000 1'b1;
	data_a[11] = #40000 1'b0;
end 
// data_a[ 10 ]
initial
begin
	data_a[10] = 1'b0;
	data_a[10] = #20000 1'b1;
	data_a[10] = #40000 1'b0;
end 
// data_a[ 9 ]
initial
begin
	data_a[9] = 1'b0;
	data_a[9] = #20000 1'b1;
	data_a[9] = #40000 1'b0;
end 
// data_a[ 8 ]
initial
begin
	data_a[8] = 1'b0;
	data_a[8] = #20000 1'b1;
	data_a[8] = #40000 1'b0;
end 
// data_a[ 7 ]
initial
begin
	data_a[7] = 1'b0;
	data_a[7] = #20000 1'b1;
	data_a[7] = #40000 1'b0;
end 
// data_a[ 6 ]
initial
begin
	data_a[6] = 1'b0;
	data_a[6] = #20000 1'b1;
	data_a[6] = #40000 1'b0;
end 
// data_a[ 5 ]
initial
begin
	data_a[5] = 1'b0;
	data_a[5] = #20000 1'b1;
	data_a[5] = #40000 1'b0;
end 
// data_a[ 4 ]
initial
begin
	data_a[4] = 1'b0;
	data_a[4] = #20000 1'b1;
	data_a[4] = #40000 1'b0;
end 
// data_a[ 3 ]
initial
begin
	data_a[3] = 1'b0;
	data_a[3] = #20000 1'b1;
	data_a[3] = #40000 1'b0;
end 
// data_a[ 2 ]
initial
begin
	data_a[2] = 1'b0;
	data_a[2] = #20000 1'b1;
	data_a[2] = #40000 1'b0;
end 
// data_a[ 1 ]
initial
begin
	data_a[1] = 1'b0;
	data_a[1] = #20000 1'b1;
	data_a[1] = #40000 1'b0;
end 
// data_a[ 0 ]
initial
begin
	data_a[0] = 1'b0;
	data_a[0] = #20000 1'b1;
	data_a[0] = #40000 1'b0;
end 

// wren_a
initial
begin
	wren_a = 1'b0;
	wren_a = #20000 1'b1;
	wren_a = #40000 1'b0;
end 

// wren_b
initial
begin
	wren_b = 1'b0;
end 
endmodule

